"Asm.fif" include
"TonUtil.fif" include
"wallets/0.pk" load-generate-keypair constant priv0 constant pub0
"wallets/1.pk" load-generate-keypair constant priv1 constant pub1
"wallets/2.pk" load-generate-keypair constant priv2 constant pub2
"wallets/3.pk" load-generate-keypair constant priv3 constant pub3
"wallets/4.pk" load-generate-keypair constant priv4 constant pub4
"wallets/5.pk" load-generate-keypair constant priv5 constant pub5
"wallets/6.pk" load-generate-keypair constant priv6 constant pub6
"wallets/7.pk" load-generate-keypair constant priv7 constant pub7
"wallets/8.pk" load-generate-keypair constant priv8 constant pub8
"wallets/9.pk" load-generate-keypair constant priv9 constant pub9

// current continuation slice
PROGRAM{ "fif/9.fif" include }END>c <s constant cc

// 0b1000 k6 test

// msg slice
<b 1378 32 u, b> dup hashu constant target_hash // target_msg
<b 5 32 u, 8000 32 u, swap ref, b> // signed_msg: seqno, exp_time, target_msg ref
dup constant msg hashu constant hash
<b pub2 B, hash priv2 ed25519_sign_uint B, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
<b pub9 B, b>
<b pub8 B, swap ref, b>
<b pub7 B, swap ref, b>
<b pub6 B, swap ref, b>
<b pub5 B, swap ref, b>
<b pub4 B, swap ref, b>
<b pub3 B, swap ref, b>
<b pub2 B, swap ref, b>
<b pub1 B, swap ref, b>
<b pub0 B, swap ref, b>
<b 5 32 u, 6 8 u, swap ref, b> // seqno, k, keys ref, no orders

runvm

swap 0<> abort"exit code"

// parse new c4 cell
dup
<s
32 u@+ swap 6 <> abort"seqno"
8 u@+ swap 6 <> abort"k"
ref@+ drop
ref@ <s
32 u@+ swap 8000 <> abort"exp_time"
128 u@+ swap 0b100 <> abort"signatures"
256 u@+ swap target_hash <> abort"hash"
s>

// same msg 0b11100 test

// msg slice
<b 1378 32 u, b> // target_msg
<b 6 32 u, 8000 32 u, swap ref, b> // signed_msg: seqno, exp_time, target_msg ref
dup constant msg hashu constant hash
<b pub2 B, hash priv2 ed25519_sign_uint B, b>
<b pub3 B, hash priv3 ed25519_sign_uint B, swap ref, b>
<b pub4 B, hash priv4 ed25519_sign_uint B, swap ref, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
rot

runvm

swap 0<> abort"exit code"

// parse new c4 cell
dup
<s
32 u@+ swap 7 <> abort"seqno"
8 u@+ swap 6 <> abort"k"
ref@+ drop
ref@ <s
32 u@+ swap 8000 <> abort"exp_time"
128 u@+ swap 0b11100 <> abort"signatures"
256 u@+ swap target_hash <> abort"hash"
s>

// new msg 0b1100100 test

// msg slice
<b 1372 32 u, b> dup hashu constant target_hash1 // target_msg
<b 7 32 u, 9000 32 u, swap ref, b> // signed_msg: seqno, exp_time, target_msg ref
dup constant msg hashu constant hash
<b pub2 B, hash priv2 ed25519_sign_uint B, b>
<b pub5 B, hash priv5 ed25519_sign_uint B, swap ref, b>
<b pub6 B, hash priv6 ed25519_sign_uint B, swap ref, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
rot

runvm

swap 0<> abort"exit code"

// parse new c4 cell
dup
<s
32 u@+ swap 8 <> abort"seqno"
8 u@+ swap 6 <> abort"k"
ref@+ drop
ref@ <s
32 u@+ swap 9000 <> abort"exp_time"
128 u@+ swap 0b1100100 <> abort"signatures"
256 u@+ swap target_hash1 <> abort"hash"
ref@ <s
32 u@+ swap 8000 <> abort"exp_time"
128 u@+ swap 0b11100 <> abort"signatures"
256 u@+ swap target_hash <> abort"hash"
s>

// first msg 0b1111100 test

// msg slice
<b 1378 32 u, b> // target_msg
<b 8 32 u, 8000 32 u, swap ref, b> // signed_msg: seqno, exp_time, target_msg ref
dup constant msg hashu constant hash
<b pub5 B, hash priv5 ed25519_sign_uint B, b>
<b pub6 B, hash priv6 ed25519_sign_uint B, swap ref, b>
<b pub4 B, hash priv4 ed25519_sign_uint B, swap ref, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
rot

runvm

swap 0<> abort"exit code"

// parse new c4 cell
dup
<s
32 u@+ swap 9 <> abort"seqno"
8 u@+ swap 6 <> abort"k"
ref@+ drop
ref@ <s
32 u@+ swap 8000 <> abort"exp_time"
128 u@+ swap 0b1111100 <> abort"signatures"
256 u@+ swap target_hash <> abort"hash"
ref@ <s
32 u@+ swap 9000 <> abort"exp_time"
128 u@+ swap 0b1100100 <> abort"signatures"
256 u@+ swap target_hash1 <> abort"hash"
s>

// first msg 0b11111100 test

// msg slice
<b 1378 32 u, b> // target_msg
<b 9 32 u, 8000 32 u, swap ref, b> // signed_msg: seqno, exp_time, target_msg ref
dup constant msg hashu constant hash
<b pub7 B, hash priv7 ed25519_sign_uint B, b>
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
rot

runvm

swap 0<> abort"exit code"

// parse new c4 cell
dup
<s
32 u@+ swap 10 <> abort"seqno"
8 u@+ swap 6 <> abort"k"
ref@+ drop
ref@ <s
32 u@+ swap 9000 <> abort"exp_time"
128 u@+ swap 0b1100100 <> abort"signatures"
256 u@+ swap target_hash1 <> abort"hash"
s>

// second msg 0b111111 test

// msg slice
<b 1372 32 u, b> // target_msg
<b 10 32 u, 9000 32 u, swap ref, b> // signed_msg: seqno, exp_time, trget_msg ref
dup constant msg hashu constant hash
<b pub5 B, hash priv5 ed25519_sign_uint B, b>
<b pub4 B, hash priv4 ed25519_sign_uint B, swap ref, b>
<b pub3 B, hash priv3 ed25519_sign_uint B, swap ref, b>
<b pub2 B, hash priv2 ed25519_sign_uint B, swap ref, b>
<b pub1 B, hash priv1 ed25519_sign_uint B, swap ref, b>
<b pub0 B, hash priv0 ed25519_sign_uint B, swap ref, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
rot

runvm

swap 0<> abort"exit code"

// parse new c4 cell
dup
<s
32 u@+ swap 11 <> abort"seqno"
8 u@+ swap 6 <> abort"k"
ref@ <s
256 u@+ swap pub0 256 B>u@ <> abort"key0"
ref@ <s
256 u@+ swap pub1 256 B>u@ <> abort"key1"
ref@ <s
256 u@+ swap pub2 256 B>u@ <> abort"key2"
ref@ <s
256 u@+ swap pub3 256 B>u@ <> abort"key3"
ref@ <s
256 u@+ swap pub4 256 B>u@ <> abort"key4"
ref@ <s
256 u@+ swap pub5 256 B>u@ <> abort"key5"
ref@ <s
256 u@+ swap pub6 256 B>u@ <> abort"key6"
ref@ <s
256 u@+ swap pub7 256 B>u@ <> abort"key7"
ref@ <s
256 u@+ swap pub8 256 B>u@ <> abort"key8"
ref@ <s
256 u@+ swap pub9 256 B>u@ <> abort"key9"
s>

cr ."ok!" cr
