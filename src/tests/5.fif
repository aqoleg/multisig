"Asm.fif" include
"TonUtil.fif" include
"wallets/0.pk" load-generate-keypair constant priv0 constant pub0
"wallets/1.pk" load-generate-keypair constant priv1 constant pub1
"wallets/2.pk" load-generate-keypair constant priv2 constant pub2
"wallets/3.pk" load-generate-keypair constant priv3 constant pub3
"wallets/4.pk" load-generate-keypair constant priv4 constant pub4
"wallets/5.pk" load-generate-keypair constant priv5 constant pub5
"wallets/6.pk" load-generate-keypair constant priv6 constant pub6
"wallets/7.pk" load-generate-keypair constant priv7 constant pub7
"wallets/8.pk" load-generate-keypair constant priv8 constant pub8
"wallets/9.pk" load-generate-keypair constant priv9 constant pub9

// current continuation slice
PROGRAM{ "fif/5.fif" include }END>c <s constant cc

<b 1378 32 u, b> // target_msg
<b 5 32 u, 8000 32 u, swap ref, b> // signed_msg: seqno, exp_time, target_msg ref
dup constant msg hashu constant hash

// 0 signatures exception

// msg slice
<b pub9 B, hash priv9 ed25519_sign_uint B, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
<b pub7 B, b>
<b 5 32 u, 2 8 u, swap ref, b> // seqno, k, keys ref

runvm

swap 34 <> abort"exit code"

// 1 signature 2 k test

// msg slice
<b pub1 B, hash priv1 ed25519_sign_uint B, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
<b pub6 B, b>
<b pub5 B, swap ref, b>
<b pub4 B, swap ref, b>
<b pub3 B, swap ref, b>
<b pub2 B, swap ref, b>
<b pub1 B, swap ref, b>
<b pub0 B, swap ref, b>
<b 5 32 u, 2 8 u, swap ref, b> // seqno, k, keys ref

runvm

swap 0<> abort"exit code"

// parse new c4 cell
<s
8 u@+ swap 1 <> abort"1"
2 i@+ swap true <> abort"true"
s>

// 3 signatures 2 k test

// msg slice
<b pub4 B, hash priv3 ed25519_sign_uint B, b>
<b pub3 B, hash priv4 ed25519_sign_uint B, swap ref, b>
<b pub2 B, hash priv2 ed25519_sign_uint B, swap ref, b>
<b pub1 B, hash priv1 ed25519_sign_uint B, swap ref, b>
<b pub0 B, hash priv0 ed25519_sign_uint B, swap ref, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
<b pub2 B, b>
<b pub1 B, swap ref, b>
<b pub0 B, swap ref, b>
<b 5 32 u, 2 8 u, swap ref, b> // seqno, k, keys ref

runvm

swap 0<> abort"exit code"

// parse new c4 cell
<s
8 u@+ swap 3 <> abort"3"
2 i@+ swap false <> abort"false"
s>

// 10 signatures 10 k test

// msg slice
<b pub9 B, hash priv9 ed25519_sign_uint B, b>
<b pub8 B, hash priv8 ed25519_sign_uint B, swap ref, b>
<b pub7 B, hash priv7 ed25519_sign_uint B, swap ref, b>
<b pub6 B, hash priv6 ed25519_sign_uint B, swap ref, b>
<b pub5 B, hash priv5 ed25519_sign_uint B, swap ref, b>
<b pub4 B, hash priv4 ed25519_sign_uint B, swap ref, b>
<b pub3 B, hash priv3 ed25519_sign_uint B, swap ref, b>
<b pub2 B, hash priv2 ed25519_sign_uint B, swap ref, b>
<b pub1 B, hash priv1 ed25519_sign_uint B, swap ref, b>
<b pub0 B, hash priv0 ed25519_sign_uint B, swap ref, b> // signatures
<b 1 4 u, msg ref, swap ref, b> <s // flag, signed_msg ref, signatures ref

// current continuation slice
cc

// c4 cell
<b pub9 B, b>
<b pub8 B, swap ref, b>
<b pub7 B, swap ref, b>
<b pub6 B, swap ref, b>
<b pub5 B, swap ref, b>
<b pub4 B, swap ref, b>
<b pub3 B, swap ref, b>
<b pub2 B, swap ref, b>
<b pub1 B, swap ref, b>
<b pub0 B, swap ref, b>
<b 5 32 u, 10 8 u, swap ref, b> // seqno, k, keys ref

runvm

swap 0<> abort"exit code"

// parse new c4 cell
<s
8 u@+ swap 10 <> abort"10"
2 i@+ swap false <> abort"false"
s>

cr ."ok!" cr
